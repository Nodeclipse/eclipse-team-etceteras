<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
Copyright (c) 2010 Netcetera, Zürich.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="pmd-eclipse" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>Netcetera PMD Configuration</description>

<!-- basic -->
  <rule ref="rulesets/basic.xml/JumbledIncrementer" />
  <rule ref="rulesets/basic.xml/ForLoopShouldBeWhileLoop" />
  <rule ref="rulesets/basic.xml/UnnecessaryConversionTemporary" />
  <rule ref="rulesets/basic.xml/ReturnFromFinallyBlock" />
  <rule ref="rulesets/basic.xml/UnnecessaryReturn" />
  <rule ref="rulesets/basic.xml/CollapsibleIfStatements" />
  <rule ref="rulesets/basic.xml/UselessOverridingMethod" />
  <rule ref="rulesets/basic.xml/ClassCastExceptionWithToArray" />
  <rule ref="rulesets/basic.xml/UselessOperationOnImmutable" />
  <rule ref="rulesets/basic.xml/UnusedNullCheckInEquals" />
  <rule ref="rulesets/basic.xml/AvoidThreadGroup" />
  <rule ref="rulesets/basic.xml/BrokenNullCheck" />
  <rule ref="rulesets/basic.xml/BigIntegerInstantiation" />
  <rule ref="rulesets/basic.xml/AvoidUsingOctalValues" />
  <rule ref="rulesets/basic.xml/AvoidUsingHardCodedIP" />
  <rule ref="rulesets/basic.xml/CheckResultSet" />
  <rule ref="rulesets/basic.xml/AvoidMultipleUnaryOperators" />
  <!-- covered by checkstyle
  <rule ref="rulesets/basic.xml/EmptyCatchBlock" /> 
  <rule ref="rulesets/basic.xml/EmptyIfStmt" />
  <rule ref="rulesets/basic.xml/EmptyWhileStmt" />
  <rule ref="rulesets/basic.xml/EmptyTryBlock" />
  <rule ref="rulesets/basic.xml/EmptyFinallyBlock" />
  <rule ref="rulesets/basic.xml/EmptySwitchStatements" />
  <rule ref="rulesets/basic.xml/EmptySynchronizedBlock" />
  <rule ref="rulesets/basic.xml/EmptyStaticInitializer" />
  <rule ref="rulesets/basic.xml/EmptyStatementNotInLoop" />
  <rule ref="rulesets/basic.xml/UnnecessaryFinalModifier" />
  <rule ref="rulesets/basic.xml/EmptyInitializer" />
  -->
  <!-- covered by findbugs
  <rule ref="rulesets/basic.xml/OverrideBothEqualsAndHashcode" />
  <rule ref="rulesets/basic.xml/DoubleCheckedLocking" />
  <rule ref="rulesets/basic.xml/BooleanInstantiation" />
  <rule ref="rulesets/basic.xml/MisplacedNullCheck" />
  --> 
  <!-- ok for int and long but nok for float and doule  
  <rule ref="rulesets/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
  -->


<!-- braces -->
  <!-- covered by checkstyle
  <rule ref="rulesets/braces.xml/IfStmtsMustUseBraces" />
  <rule ref="rulesets/braces.xml/WhileLoopsMustUseBraces" />
  <rule ref="rulesets/braces.xml/IfElseStmtsMustUseBraces" />
  <rule ref="rulesets/braces.xml/ForLoopsMustUseBraces" />
  -->


<!-- junit -->
  <rule ref="rulesets/junit.xml/UnnecessaryBooleanAssertion" />
  <rule ref="rulesets/junit.xml/UseAssertEqualsInsteadOfAssertTrue" />
  <rule ref="rulesets/junit.xml/UseAssertSameInsteadOfAssertTrue" />
  <rule ref="rulesets/junit.xml/UseAssertNullInsteadOfAssertTrue" />
  <rule ref="rulesets/junit.xml/SimplifyBooleanAssertion" />
  <!-- disabled as not applicable or too many false positives
  <rule ref="rulesets/junit.xml/JUnitStaticSuite" />
  <rule ref="rulesets/junit.xml/JUnitSpelling" />
  <rule ref="rulesets/junit.xml/JUnitAssertionsShouldIncludeMessage" />
  <rule ref="rulesets/junit.xml/JUnitTestsShouldIncludeAssert"/>
  <rule ref="rulesets/junit.xml/TestClassWithoutTestCases" />
  -->


<!-- coupling -->
  <rule ref="rulesets/coupling.xml/LooseCoupling" />
  <!-- hard to express in a single number
  <rule ref="rulesets/coupling.xml/CouplingBetweenObjects" />
  <rule ref="rulesets/coupling.xml/ExcessiveImports" />
  -->


<!-- logging java -->
  <rule ref="rulesets/logging-java.xml/MoreThanOneLogger" />
  <rule ref="rulesets/logging-java.xml/SystemPrintln" />
  <rule ref="rulesets/logging-java.xml/AvoidPrintStackTrace" />
  <!-- that Griders style
  <rule ref="rulesets/logging-java.xml/LoggerIsNotStaticFinal"/>
  -->


<!-- imports -->
  <!-- covered by checkstyle and eclipse
  <rule ref="rulesets/imports.xml/DuplicateImports" />
  <rule ref="rulesets/imports.xml/DontImportJavaLang" />
  <rule ref="rulesets/imports.xml/UnusedImports" />
  <rule ref="rulesets/imports.xml/ImportFromSamePackage" />
  <rule ref="rulesets/imports.xml/TooManyStaticImports" />
  -->


<!-- strings -->
  <rule ref="rulesets/strings.xml/StringInstantiation" />
  <rule ref="rulesets/strings.xml/StringToString" />
  <rule ref="rulesets/strings.xml/InefficientStringBuffering" />
  <rule ref="rulesets/strings.xml/UnnecessaryCaseChange" />
  <rule ref="rulesets/strings.xml/UseStringBufferLength" />
  <rule ref="rulesets/strings.xml/AppendCharacterWithChar" />
  <rule ref="rulesets/strings.xml/ConsecutiveLiteralAppends" />
  <rule ref="rulesets/strings.xml/UseIndexOfChar" />
  <rule ref="rulesets/strings.xml/InefficientEmptyStringCheck" />
  <rule ref="rulesets/strings.xml/InsufficientStringBufferDeclaration" />
  <rule ref="rulesets/strings.xml/UselessStringValueOf" />
  <rule ref="rulesets/strings.xml/StringBufferInstantiationWithChar" />
  <rule ref="rulesets/strings.xml/UseEqualsToCompareStrings" />
  <rule ref="rulesets/strings.xml/AvoidStringBufferField" />
  <!-- too many false positives for logging and exception messages
  <rule ref="rulesets/strings.xml/AvoidDuplicateLiterals" />
   -->

<!-- naming -->
  <rule ref="rulesets/naming.xml/ShortMethodName" />
  <rule ref="rulesets/naming.xml/VariableNamingConventions" />
  <rule ref="rulesets/naming.xml/MethodNamingConventions" />
  <rule ref="rulesets/naming.xml/ClassNamingConventions" />
  <rule ref="rulesets/naming.xml/AbstractNaming" />
  <rule ref="rulesets/naming.xml/AvoidDollarSigns" />
  <rule ref="rulesets/naming.xml/SuspiciousHashcodeMethodName" />
  <rule ref="rulesets/naming.xml/SuspiciousConstantFieldName" />
  <rule ref="rulesets/naming.xml/SuspiciousEqualsMethodName" />
  <rule ref="rulesets/naming.xml/AvoidFieldNameMatchingTypeName" />
  <rule ref="rulesets/naming.xml/NoPackage" />
  <rule ref="rulesets/naming.xml/PackageCase" />
  <!-- covered by checkstyle 
  <rule ref="rulesets/naming.xml/MethodWithSameNameAsEnclosingClass" />
  <rule ref="rulesets/naming.xml/MisleadingVariableName" />
  -->
  <!-- too many false positives for SQL constants
  <rule ref="rulesets/naming.xml/LongVariable">
    <properties>
      <property name="minimum" value="30"/>
    </properties>
  </rule>
  -->
  <!-- has valid uses
  <rule ref="rulesets/naming.xml/AvoidFieldNameMatchingMethodName" />
  <rule ref="rulesets/naming.xml/ShortVariable"/>
  <rule ref="rulesets/naming.xml/BooleanGetMethodName" />
  -->


<!-- codesize -->
  <!-- covered mostly by checkstyle 
  <rule ref="rulesets/codesize.xml/NPathComplexity"/>
  <rule ref="rulesets/codesize.xml/ExcessiveMethodLength" />
  <rule ref="rulesets/codesize.xml/ExcessiveParameterList" />
  <rule ref="rulesets/codesize.xml/ExcessiveClassLength" />
  <rule ref="rulesets/codesize.xml/CyclomaticComplexity"/>
  <rule ref="rulesets/codesize.xml/ExcessivePublicCount" />
  <rule ref="rulesets/codesize.xml/TooManyFields" />
  <rule ref="rulesets/codesize.xml/NcssMethodCount" />
  <rule ref="rulesets/codesize.xml/NcssTypeCount" />
  <rule ref="rulesets/codesize.xml/NcssConstructorCount" />
  <rule ref="rulesets/codesize.xml/TooManyMethods">
    <properties>
      <property name="maxmethods" value="30"/>
    </properties>
  </rule>
  -->


<!-- unusedcode -->
  <rule ref="rulesets/unusedcode.xml/UnusedPrivateField" />
  <rule ref="rulesets/unusedcode.xml/UnusedLocalVariable" />
  <rule ref="rulesets/unusedcode.xml/UnusedPrivateMethod" />
  <!-- seems not to support overridden methods
  <rule ref="rulesets/unusedcode.xml/UnusedFormalParameter" />
  -->


<!-- typeresolution -->
  <rule ref="rulesets/typeresolution.xml/LooseCoupling" />
  <rule ref="rulesets/typeresolution.xml/CloneMethodMustImplementCloneable" />
  <!-- covered by checkstyle
  <rule ref="rulesets/typeresolution.xml/UnusedImports" />
  -->
 

<!-- controversial -->
  <rule ref="rulesets/controversial.xml/AssignmentInOperand" />
  <rule ref="rulesets/controversial.xml/SuspiciousOctalEscape" />
  <rule ref="rulesets/controversial.xml/BooleanInversion" />
  <rule ref="rulesets/controversial.xml/UnnecessaryParentheses" />
  <rule ref="rulesets/controversial.xml/AvoidUsingShortType" />
  <rule ref="rulesets/controversial.xml/AvoidUsingNativeCode" />
  <rule ref="rulesets/controversial.xml/AvoidAccessibilityAlteration" />
  <rule ref="rulesets/controversial.xml/DoNotCallGarbageCollectionExplicitly" />
  <!-- deactivated
  <rule ref="rulesets/controversial.xml/CallSuperInConstructor" />
  <rule ref="rulesets/controversial.xml/UnnecessaryConstructor" />
  <rule ref="rulesets/controversial.xml/NullAssignment" />
  <rule ref="rulesets/controversial.xml/OnlyOneReturn"/>
  <rule ref="rulesets/controversial.xml/AtLeastOneConstructor" />
  <rule ref="rulesets/controversial.xml/DataflowAnomalyAnalysis"/>
  <rule ref="rulesets/controversial.xml/AvoidFinalLocalVariable"/>
  -->
  <!-- covered by the eclipse compiler
  <rule ref="rulesets/controversial.xml/UnusedModifier" />
  -->
  <!-- we need sun for jersey
  <rule ref="rulesets/controversial.xml/DontImportSun"/>
  -->
  <!-- default sope is perfect says Josh Bloch
  <rule ref="rulesets/controversial.xml/DefaultPackage"/>
  -->
  <!-- we use volatile for shared state without check-then-act
  <rule ref="rulesets/controversial.xml/AvoidUsingVolatile"/>
  -->


<!-- optimizations -->
  <rule ref="rulesets/optimizations.xml/UseStringBufferForStringAppends" />
  <rule ref="rulesets/optimizations.xml/UseArraysAsList" />
  <rule ref="rulesets/optimizations.xml/AvoidArrayLoops" />
  <rule ref="rulesets/optimizations.xml/UnnecessaryWrapperObjectCreation" />
  <rule ref="rulesets/optimizations.xml/AddEmptyString" />
  <!-- they just makes code more verbose
  <rule ref="rulesets/optimizations.xml/LocalVariableCouldBeFinal"/>
  -->
  <!-- an Eclipse warning for assignment exits
  <rule ref="rulesets/optimizations.xml/MethodArgumentCouldBeFinal"/>
  -->
  <!-- false positives
  <rule ref="rulesets/optimizations.xml/AvoidInstantiatingObjectsInLoops"/>
  -->


<!-- design -->
  <rule ref="rulesets/design.xml/UseSingleton" />
  <rule ref="rulesets/design.xml/SimplifyBooleanReturns" />
  <rule ref="rulesets/design.xml/SimplifyBooleanExpressions" />
  <rule ref="rulesets/design.xml/SwitchDensity" />
  <rule ref="rulesets/design.xml/ConstructorCallsOverridableMethod" />
  <rule ref="rulesets/design.xml/AccessorClassGeneration" />
  <rule ref="rulesets/design.xml/NonStaticInitializer" />
  <rule ref="rulesets/design.xml/DefaultLabelNotLastInSwitchStmt" />
  <rule ref="rulesets/design.xml/BadComparison" />
  <rule ref="rulesets/design.xml/EqualsNull" />
  <rule ref="rulesets/design.xml/InstantiationToGetClass" />
  <rule ref="rulesets/design.xml/IdempotentOperations" />
  <rule ref="rulesets/design.xml/SimpleDateFormatNeedsLocale" />
  <rule ref="rulesets/design.xml/ImmutableField" />
  <rule ref="rulesets/design.xml/MissingStaticMethodInNonInstantiatableClass" />
  <rule ref="rulesets/design.xml/AvoidProtectedFieldInFinalClass" />
  <rule ref="rulesets/design.xml/UseNotifyAllInsteadOfNotify" />
  <rule ref="rulesets/design.xml/AvoidInstanceofChecksInCatchClause" />
  <rule ref="rulesets/design.xml/UnnecessaryLocalBeforeReturn" />
  <rule ref="rulesets/design.xml/SimplifyConditional" />
  <rule ref="rulesets/design.xml/UncommentedEmptyMethod" />
  <rule ref="rulesets/design.xml/AvoidConstantsInterface" />
  <rule ref="rulesets/design.xml/PreserveStackTrace" />
  <rule ref="rulesets/design.xml/UseCollectionIsEmpty" />
  <rule ref="rulesets/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
  <rule ref="rulesets/design.xml/SingularField" />
  <rule ref="rulesets/design.xml/ReturnEmptyArrayRatherThanNull" />

  <!-- covered by checkstyle
  <rule ref="rulesets/design.xml/AvoidDeeplyNestedIfStmts" />
  <rule ref="rulesets/design.xml/AvoidReassigningParameters" />
  <rule ref="rulesets/design.xml/NonCaseLabelInSwitchStatement" />
  <rule ref="rulesets/design.xml/MissingBreakInSwitch" />
  <rule ref="rulesets/design.xml/AbstractClassWithoutAnyMethod" />
  <rule ref="rulesets/design.xml/TooFewBranchesForASwitchStatement" />
  -->
  <!-- ovred by findbugs
  <rule ref="rulesets/design.xml/FinalFieldCouldBeStatic" />
  <rule ref="rulesets/design.xml/CloseResource" />
  <rule ref="rulesets/design.xml/OptimizableToArrayCall" />
  <rule ref="rulesets/design.xml/UseLocaleWithCaseConversions" />
  <rule ref="rulesets/design.xml/UnsynchronizedStaticDateFormatter" />
  -->
  <!-- problematic for enums
  <rule ref="rulesets/design.xml/SwitchStmtsShouldHaveDefault" />
  -->
  <!-- has valid uses
  <rule ref="rulesets/design.xml/AssignmentToNonFinalStatic" />
  <rule ref="rulesets/design.xml/ConfusingTernary"/>
  <rule ref="rulesets/design.xml/AvoidSynchronizedAtMethodLevel" />
  <rule ref="rulesets/design.xml/AbstractClassWithoutAbstractMethod" />
  <rule ref="rulesets/design.xml/CompareObjectsWithEquals" />
  <rule ref="rulesets/design.xml/PositionLiteralsFirstInComparisons" />
  <rule ref="rulesets/design.xml/UncommentedEmptyConstructor" />
  <rule ref="rulesets/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
  -->
  <!-- false positive
  <rule ref="rulesets/design.xml/NonThreadSafeSingleton" />
  -->


<!-- migrating -->
  <rule ref="rulesets/migrating.xml/ReplaceVectorWithList" />
  <rule ref="rulesets/migrating.xml/ReplaceHashtableWithMap" />
  <rule ref="rulesets/migrating.xml/ReplaceEnumerationWithIterator" />
  <rule ref="rulesets/migrating.xml/AvoidEnumAsIdentifier" />
  <rule ref="rulesets/migrating.xml/AvoidAssertAsIdentifier" />
  <!-- covered by findbugs
  <rule ref="rulesets/migrating.xml/JUnit4TestShouldUseTestAnnotation" />
  <rule ref="rulesets/migrating.xml/IntegerInstantiation" />
  <rule ref="rulesets/migrating.xml/ByteInstantiation" />
  <rule ref="rulesets/migrating.xml/ShortInstantiation" />
  <rule ref="rulesets/migrating.xml/LongInstantiation" />
  -->
  <!-- too strict
  <rule ref="rulesets/migrating.xml/JUnitUseExpected" />
  -->

<!-- clone -->
  <!-- covered by checkstyle
  <rule ref="rulesets/clone.xml/ProperCloneImplementation" />
  <rule ref="rulesets/clone.xml/CloneThrowsCloneNotSupportedException" />
  -->
  <!-- TODO
  <rule ref="rulesets/clone.xml/CloneMethodMustImplementCloneable" />
  -->

<!-- sunsecure -->
  <!-- has valid uses
  <rule ref="rulesets/sunsecure.xml/MethodReturnsInternalArray" />
  <rule ref="rulesets/sunsecure.xml/ArrayIsStoredDirectly" />
  -->
  <!-- causes problems with non-static loggers
  <rule ref="rulesets/javabeans.xml/BeanMembersShouldSerialize"/>
  -->
  <!-- deactivated in Eclipse as well
  <rule ref="rulesets/javabeans.xml/MissingSerialVersionUID" />
  -->


<!-- strictexception -->
  <rule ref="rulesets/strictexception.xml/AvoidCatchingThrowable" />
  <rule ref="rulesets/strictexception.xml/ExceptionAsFlowControl" />
  <rule ref="rulesets/strictexception.xml/AvoidCatchingNPE" />
  <rule ref="rulesets/strictexception.xml/AvoidThrowingRawExceptionTypes" />
  <rule ref="rulesets/strictexception.xml/AvoidRethrowingException" />
  <rule ref="rulesets/strictexception.xml/DoNotExtendJavaLangError" />
  <rule ref="rulesets/strictexception.xml/DoNotThrowExceptionInFinally" />
  <rule ref="rulesets/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
  <!-- is ok
  <rule ref="rulesets/strictexception.xml/SignatureDeclareThrowsException">
    <properties>
      <property name="IgnoreJUnitCompletely" value="true"/>
    </properties>
  </rule>
  <rule ref="rulesets/strictexception.xml/AvoidThrowingNullPointerException" />
  -->


<!-- finalizers -->
  <rule ref="rulesets/finalizers.xml/EmptyFinalizer" />
  <rule ref="rulesets/finalizers.xml/FinalizeOnlyCallsSuperFinalize" />
  <rule ref="rulesets/finalizers.xml/FinalizeOverloaded" />
  <rule ref="rulesets/finalizers.xml/FinalizeDoesNotCallSuperFinalize" />
  <rule ref="rulesets/finalizers.xml/FinalizeShouldBeProtected" />
  <rule ref="rulesets/finalizers.xml/AvoidCallingFinalize" />


<!-- j2ee -->
  <rule ref="rulesets/j2ee.xml/DoNotCallSystemExit" />
  <rule ref="rulesets/j2ee.xml/StaticEJBFieldShouldBeFinal" />
  <!-- rule refers to old jee versions
  <rule ref="rulesets/j2ee.xml/DoNotUseThreads" />
  <rule ref="rulesets/j2ee.xml/UseProperClassLoader" />
  <rule ref="rulesets/j2ee.xml/MDBAndSessionBeanNamingConvention" />
  <rule ref="rulesets/j2ee.xml/RemoteSessionInterfaceNamingConvention" />
  <rule ref="rulesets/j2ee.xml/LocalInterfaceSessionNamingConvention" />
  <rule ref="rulesets/j2ee.xml/LocalHomeNamingConvention" />
  <rule ref="rulesets/j2ee.xml/RemoteInterfaceNamingConvention" />
  -->

</ruleset>
